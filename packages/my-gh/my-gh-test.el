;;; my-gh-test.el --- Tests for my-gh
(require 'hydra)
(require 'my-gh)

(defun hashtable-equal? (ht1 ht2)
  "Compare if two hashtables are equal (values and keys)"
  (cl-labels ((is-equal? (x1 x2)
                (cond ((and (numberp x1) (numberp x2))
                       (= x1 x2))
                      ((and (stringp x1) (stringp x2))
                       (string-equal x1 x2))
                      ((and (booleanp x1) (booleanp x2))
                       (equal x1 x2))
                      ((and (keywordp x1) (keywordp x2))
                       (equal x1 x2))
                      ((and (hash-table-p x1) (hash-table-p x2))
                       (and (-all? (lambda (x1-pair)
                                     (let ((key (car x1-pair))
                                           (val (cdr x1-pair)))
                                       (is-equal? val (gethash key x2 :missing))))
                                   (map-pairs x1))
                            (-all? (lambda (x2-pair)
                                     (let ((key (car x2-pair))
                                           (val (cdr x2-pair)))
                                       (is-equal? val (gethash key x1 :missing))))
                                   (map-pairs x2))))
                      ('t nil))))
    (is-equal? ht1 ht2)))

(defun get-file-as-string (filename)
  (with-temp-buffer
    (insert-file filename)
    (buffer-string)))

(defun fake-pr ()
  (let ((table (make-hash-table :test 'equal)))
    (puthash "author"
             (let ((author (make-hash-table :test 'equal)))
               (puthash "login" "janedoe" author)
               author)
             table)
    (puthash "createdAt" "2025-10-01T08:49:59Z" table)
    (puthash "headRefName" "my-branch" table)
    (puthash "id" "PR_xxxxxxxxxxx" table)
    (puthash "state" "OPEN" table)
    (puthash "title" "MY TITLE" table)
    (puthash "number" 1234 table)
    table))

(ert-deftest my/gh//browse-commit-cmd ()
  (should (equal (my/gh//browse-commit-cmd "7fa72cc") "gh browse 7fa72cc"))
  (should (equal (my/gh//browse-commit-cmd '7fa72cc) "gh browse 7fa72cc"))
  (should (equal (my/gh//browse-commit-cmd '7fa72cc 't) "gh browse --no-browser 7fa72cc")))

(ert-deftest my/gh/browse-url-to-clipboard ()
  (let* ((fake-clipboard "")
         (my/gh/copy-to-clipboard (lambda (x) (setq fake-clipboard x))))
    (cl-letf (((symbol-function 'shell-command-to-string)
               (lambda (x)
                 (should (equal x "gh browse --no-browser foo:1"))
                 "http:://foo.com#1")))
      (my/gh/browse-url-to-clipboard "foo" 1)
      (should (equal fake-clipboard "http:://foo.com#1")))))

(ert-deftest my/gh/browse-file-url ()
  (cl-letf (((symbol-function 'shell-command-to-string)
             (lambda (x)
               (should (equal x "gh browse --no-browser foo:1"))
               "http:://foo.com#1")))
    (should (equal (my/gh//browse-file-url "foo" 1) "http:://foo.com#1")))
  (cl-letf (((symbol-function 'shell-command-to-string)
             (lambda (x)
               (should (equal x "gh browse --no-browser foo"))
               "http:://foo.com")))
    (should (equal (my/gh//browse-file-url "foo") "http:://foo.com"))))

(ert-deftest my/gh/test-get-pr-list ()
  (let ((gh-fake-output (-> (file-name-concat "test-assets" "fake-pr-list.json")
                            (get-file-as-string))))
    (cl-letf (((symbol-function 'shell-command-to-string)
               (lambda (x)
                 (should (equal x "gh pr list --json='author,id,title,url,state,createdAt,isDraft,number,headRefName'"))
                 gh-fake-output)))
      (let ((result (my/gh//get-pr-list)))
        (should (equal (-> result (aref 0) (->> (gethash "id")))
                       "PR_fakeId1234567890a"))
        (should (equal (-> result (aref 0) (->> (gethash "isDraft")))
                       :false))
        (should (equal (-> result (aref 0) (->> (gethash "number")))
                       5001))
        (should (equal (-> result (aref 0) (->> (gethash "state")))
                       "OPEN"))
        (should (equal (-> result (aref 0) (->> (gethash "title")))
                       "[FEATURE-101]: Add new authentication method"))
        (should (equal (-> result (aref 0) (->> (gethash "url")))
                       "https://github.com/example/repo/pull/5001"))
        (should (equal (length result) 10))))))

(ert-deftest my/gh/test-prompt-user-to-select-pr ()
  (let ((candidates (list (fake-pr))))
    (cl-letf (((symbol-function 'completing-read)
               (lambda (_ candidates ___ ____) (car candidates))))
      (let ((result (my/gh//prompt-user-to-select-pr candidates)))
        (should (hashtable-equal? result (fake-pr)))))))
;;; my-gh-test.el ends here

