* My Emacs Init

This repo contains my init file for Emacs.

It was never intended to be published, so it is not organized and/or contains
necessarily quality code, but hopefully it will help someone someday.

Also, I still have some internal dependencies (elisp files) that I can
not publish, so not 100% of this file will run everywhere. Let me know
if you are curious about something in particular.

Also, this init file depends on another four personal libraries,
published in https://github.com/vitorqb/mylisputils, in
https://github.com/vitorqb/my-show-definitions, in
https://github.com/vitorqb/my-fuzzy-cmd-selector and in
https://github.com/vitorqb/orgext. Be sure to have then in your load
path (see [[*Setting up][Setting up]]).

** About

   Some principles about the init file is:

   1) I actually use this package in my everyday life, and I'll update
      it accordingly every time I want a new feature or I want to drop
      a feature.

   2) =(use-package :ensure)= is out friend for all usefull packages.
      Whenever you have a new computer, just loading the init file will
      install 90% of what you want.

   3) This init must be flexible enough to fit multiple purposes, which
      for me means it must fit my home and work laptops.

   4) *Hydras are awesome* and are way easier than remembering keystrokes.

** Setting up

   First, ensure your =~/.emacs= reads the init file:

#+begin_src elisp
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;; (package-initialize)
(load-file "<path-to-emacs-init.el>")
#+end_src

   Secondly, some variables can be customized. Those are described in
   the very top of =emacs-init.el=. The script will look for a script
   in =~/.config/emacs_init/config.el= and trust this script to set
   the variables it needs to set. I have something like this there:

#+begin_src elisp
;; file: ~/.config/emacs_init/config.el
(custom-set-variables
 '(my-font-size 7)
 '(my-journal-dir "/home/vitor/myorg/journal-personal/")
 '(my-current-profile :home)
 '(my/custom-libraries-folder "/home/vitor/.emacs.d/other/")
 '(my/custom-libraries-names '("project-a" "project-b" ...))
 '(my/custom-welcome-script "/home/vitor/.emacs.d/other/mywelcome/mywelcome.el"))
#+end_src

   Third, you may want to set a hook script that will be execute only
   in a specific profile. Those go into
   =~/.config/emacs_init/profile-hooks/<profile-name>.el=. For example, for my =:work=
   profile I have:

#+begin_src elisp
;; file: ~/.config/emacs_init/profile-hooks/work.el

(load "<my-personal-library-for-work>.el")
(add-hook 'after-init-hook (setup-workspace-for-work))
...
#+end_src

   Finally, this script depends on other personal libraries I have.
   Installing those libraries is simply git-clonning their repositories
   to the =my/custom-libraries-folder=. You can use the scripts
   =scripts/clone-libs-repos.sh= to do that:

#+begin_example
$ ./clone-libs-repos.sh /home/vitor/mytmp/some/crazy/dir
PROCESSING:
mylisputils           https://github.com/vitorqb/mylisputils.git

Cloning into '/home/vitor/mytmp/some/crazy/dir/mylisputils'...
remote: Enumerating objects: 135, done.
remote: Counting objects: 100% (135/135), done.
remote: Compressing objects: 100% (85/85), done.
remote: Total 135 (delta 67), reused 111 (delta 46), pack-reused 0
Receiving objects: 100% (135/135), 20.11 KiB | 643.00 KiB/s, done.
Resolving deltas: 100% (67/67), done.
PROCESSING:
my-show-definitions   https://github.com/vitorqb/my-show-definitions.git

Cloning into '/home/vitor/mytmp/some/crazy/dir/my-show-definitions'...
remote: Enumerating objects: 21, done.
remote: Counting objects: 100% (21/21), done.
remote: Compressing objects: 100% (14/14), done.
remote: Total 21 (delta 8), reused 19 (delta 6), pack-reused 0
Unpacking objects: 100% (21/21), done.
PROCESSING:
my-fuzzy-cmd-selector https://github.com/vitorqb/my-fuzzy-cmd-selector.git

Cloning into '/home/vitor/mytmp/some/crazy/dir/my-fuzzy-cmd-selector'...
remote: Enumerating objects: 17, done.
remote: Counting objects: 100% (17/17), done.
remote: Compressing objects: 100% (14/14), done.
remote: Total 17 (delta 3), reused 13 (delta 2), pack-reused 0
Unpacking objects: 100% (17/17), done.
#+end_example

   With no argument it clones to =~/.emacs.d/other/=

** More
   Contact me if you want anything and I'll try to help :)
