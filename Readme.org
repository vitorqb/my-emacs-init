* My Emacs Init

This repo contains my init file for Emacs.

It was never intended to be published, so it is not organized and/or contains
necessarily quality code, but hopefully it will help someone someday.

** About

   Some principles about the init file is:

   1) I actually use this package in my everyday life, and I'll update
      it accordingly every time I want a new feature or I want to drop
      a feature.

   2) =(use-package :ensure)= is out friend for all usefull packages.
      Whenever you have a new computer, just loading the init file will
      install 90% of what you want.

   3) This init must be flexible enough to fit multiple purposes, which
      for me means it must fit my home and work laptops.

   4) *Hydras are awesome* and are way easier than remembering keystrokes.

** Setting up

   First, ensure your =~/.emacs= reads the init file:

#+begin_src elisp
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;; (package-initialize)
(load-file "<path-to-emacs-init.el>")
#+end_src

   Secondly, some variables can be customized. Those are described in
   the very top of =emacs-init.el=. We will look for a file in
   =~/.config/emacs_init/config.el=, load it and trust it to set the
   variables it needs to set. You can use this to have
   computer-specific settings, and to setup some vars needed for the
   emacs-init itself.

   You will have oportunity later to set other variables depending on your [[*Profiles][Profile]].

   I have something like this there:

#+begin_src elisp
;; file: ~/.config/emacs_init/config.el
(custom-set-variables
 '(my-font-size "11")
 '(my-font-name "Hack"))
#+end_src

   Third, you may want to set a hook script that will be execute only
   in a specific profile (see [[*Profiles][Profiles]]). Those go into
   =~/.config/emacs_init/profile-hooks/<profile-name>.el=. For example, for my =:work=
   profile I have:

#+begin_src elisp
;; file: ~/.config/emacs_init/profile-hooks/work.el

(load "<my-personal-library-for-work>.el")
(add-hook 'after-init-hook (setup-workspace-for-work))
...
#+end_src

   Finally, this script depends on other personal libraries I have (see [[*Dependencies][Dependencies]]).
   Installing those libraries is simply git-clonning their
   repositories to the directory pointed by
   ~my/emacs-init-deps-path~. You can use the scripts
   =scripts/clone-libs-repos.sh= to do that:

#+begin_example
./scripts/clone-libs-repos.sh
#+end_example

   With no argument it clones to =~/.emacs.d/emacs_init_deps/=.

** Hooks

   You con put extra initiatilization logic on =~/.config/emacs_init/hook.el=. This
   file will be loaded at the very end of `emacs-init.el`.

** Modules

   The ~modules~ folder defines setups for languages/programs that we don't load
   when loading the init so we can increase our startup time.

   You can load a module at any time by calling ~emacs-init-load-module-<name>~.

   For example, if I'm going to work with python I just have to call

   : M-x emacs-init-load-module-python

   You can use [[#hooks][Hooks]] to automatically load modules you always use:

#+begin_src elisp
;; file: ~/.config/emacs_init/profile-hooks/work.el
(emacs-init-load-module-python)

;; file: ~/.config/emacs_init/profile-hooks/home.el
(emacs-init-load-module-clojure)
#+end_src

** More
   Contact me if you want anything and I'll try to help :)
